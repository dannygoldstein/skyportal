import React from "react";
import PropTypes from "prop-types";
import { useDispatch } from "react-redux";
import { Link } from "react-router-dom";

import Drawer from "@material-ui/core/Drawer";
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import List from "@material-ui/core/List";
import ListItem from "@material-ui/core/ListItem";
import ListItemIcon from "@material-ui/core/ListItemIcon";
import ListItemText from "@material-ui/core/ListItemText";
import { blue } from "@material-ui/core/colors";
import IconButton from "@material-ui/core/IconButton";
import { makeStyles } from "@material-ui/core/styles";

{% for item in app.sidebar %}
import {{ item.icon }}Icon from "@material-ui/icons/{{ item.icon }}";
{% endfor %}
import MenuIcon from "@material-ui/icons/Menu";

import QuickSearchBar from "./QuickSearchBar";
import HeaderContent from "./HeaderContent";
import * as Actions from "../ducks/sidebar";

const drawerWidth = 190;

const useStyles = makeStyles((theme) => ({
  root: {
    display: 'flex',
  },
  appBar: {
    position: "fixed",
    zIndex: 150,
    transition: theme.transitions.create(['margin', 'width'], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    height: "6em",
    background: "#38B0DE",
  },
  appBarShift: {
    width: `calc(100% - ${drawerWidth}px)`,
    marginLeft: drawerWidth,
    transition: theme.transitions.create(['margin', 'width'], {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.enteringScreen,
    }),
  },
  menuButton: {
    marginRight: theme.spacing(2),
    marginTop: "0.8em",
  },
  hide: {
    display: 'none',
  },
  drawer: {
    width: drawerWidth,
    flexShrink: 0,
  },
  drawerPaper: {
    zIndex: 140,
    width: drawerWidth,
    paddingLeft: "0.4em",
    background: "#33345C",
    fontSize: "1.2em",
  },
  toolbar: {
    display: "flex",
    height: "4em",
    padding: "1em 0em",
    alignItems: "center",
  },
  drawerHeader: {
    display: 'flex',
    alignItems: 'center',
    padding: theme.spacing(0, 1),
    // necessary for content to be below app bar
    ...theme.mixins.toolbar,
    paddingTop: "6em",
    justifyContent: 'flex-end',
  },
  link: {
    color: "#B8D2FF",
    textDecoration: "none",
  }
}));

const SidebarAndHeader = ({ open }) => {
  const dispatch = useDispatch();
  const classes = useStyles();

  const handleToggleSidebarOpen = () => {
    dispatch(Actions.toggleSidebar());
  };

  return (
    <>
      <AppBar
        className={classes.appBar}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            onClick={handleToggleSidebarOpen}
            edge="start"
            className={classes.menuButton}
          >
            <MenuIcon />
          </IconButton>
          <HeaderContent />
        </Toolbar>
      </AppBar>
      <Drawer
        className={classes.drawer}
        variant="persistent"
        anchor="left"
        open={open}
        classes={{ "{{ paper: classes.drawerPaper }}" }}
      >
        <div className={classes.drawerHeader} />
        <List>
          {%- for item in app.sidebar -%}

          {%- if item.url.startswith('http') %}
          <a href="{{ item.url }}" className={classes.link}>
          {% else %}
          <Link to="{{ item.url }}" className={classes.link}>
          {%- endif %}
            <ListItem button name="sidebar{{ item.name }}Button">
              <ListItemIcon>
                <{{ item.icon }}Icon style={{ "{{ color: blue[200] }}" }} />
              </ListItemIcon>
              <ListItemText primary="{{ item.name }}" />
            </ListItem>
          {%- if item.url.startswith('http') %}
          </a>
          {% else %}
          </Link>
          {%- endif -%}

          {%- endfor %}
        </List>

        <QuickSearchBar id="search" />
      </Drawer>
    </>
  );
};

SidebarAndHeader.propTypes = {
  open: PropTypes.bool.isRequired
};

export default SidebarAndHeader;
